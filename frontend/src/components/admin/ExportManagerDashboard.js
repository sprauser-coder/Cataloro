/**
 * CATALORO - Export Manager Dashboard
 * PDF template editing and export configuration management
 */

import React, { useState, useEffect } from 'react';
import { 
  FileText,
  Download,
  Upload,
  Edit3,
  Save,
  RefreshCw,
  Image,
  Type,
  Layout,
  Palette,
  Settings,
  Eye,
  Code,
  Folder,
  Plus,
  Trash2,
  Copy,
  Check,
  X,
  AlertCircle,
  Info,
  Zap,
  Crown,
  Star,
  Award,
  Camera,
  Calendar,
  Tag,
  BarChart3,
  PieChart,
  TrendingUp,
  DollarSign,
  Package,
  ShoppingCart,
  Users,
  Building,
  Globe,
  Mail,
  Lock,
  Shield,
  Target,
  Database,
  Archive
} from 'lucide-react';
import { useNotifications } from '../../context/NotificationContext';
import { useAuth } from '../../context/AuthContext';

// PDF Template Types
const templateTypes = [
  {
    key: 'basket_export',
    label: 'Basket Export',
    description: 'User inventory/basket PDF exports',
    icon: ShoppingCart,
    color: 'blue'
  },
  {
    key: 'user_data_export',
    label: 'User Data Export',
    description: 'Complete user data PDF exports',
    icon: Users,
    color: 'green'
  },
  {
    key: 'listing_report',
    label: 'Listing Report',
    description: 'Marketplace listing analysis reports',
    icon: Package,
    color: 'purple'
  },
  {
    key: 'financial_report',
    label: 'Financial Report',
    description: 'Revenue and transaction reports',
    icon: DollarSign,
    color: 'yellow'
  },
  {
    key: 'admin_analytics',
    label: 'Admin Analytics',
    description: 'Administrative dashboard exports',
    icon: BarChart3,
    color: 'indigo'
  }
];

// Default PDF template configuration
const defaultTemplateConfig = {
  header: {
    enabled: true,
    logo: '',
    title: 'Cataloro Marketplace',
    subtitle: 'Export Report',
    showDate: true,
    backgroundColor: '#f8fafc',
    textColor: '#1e293b'
  },
  content: {
    fontSize: 12,
    fontFamily: 'Helvetica',
    lineSpacing: 1.2,
    margins: { top: 20, bottom: 20, left: 20, right: 20 },
    showPageNumbers: true,
    watermark: ''
  },
  footer: {
    enabled: true,
    text: 'Generated by Cataloro Marketplace',
    showTimestamp: true,
    backgroundColor: '#f1f5f9',
    textColor: '#64748b'
  },
  styling: {
    primaryColor: '#3b82f6',
    secondaryColor: '#64748b',
    accentColor: '#10b981',
    borderRadius: 8,
    showBorders: true,
    alternatingRows: true
  }
};

function ExportManagerDashboard() {
  const { showToast } = useNotifications();
  const { user } = useAuth();
  const [selectedTemplate, setSelectedTemplate] = useState(templateTypes[0]);
  const [templateConfig, setTemplateConfig] = useState(defaultTemplateConfig);
  const [savedConfigs, setSavedConfigs] = useState({});
  const [previewLoading, setPreviewLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('templates');
  const [hasChanges, setHasChanges] = useState(false);
  const [logoFile, setLogoFile] = useState(null);
  const [logoPreview, setLogoPreview] = useState('');

  useEffect(() => {
    loadTemplateConfigurations();
  }, []);

  useEffect(() => {
    // Load configuration for selected template
    if (savedConfigs[selectedTemplate.key]) {
      setTemplateConfig(savedConfigs[selectedTemplate.key]);
    } else {
      setTemplateConfig(defaultTemplateConfig);
    }
    setHasChanges(false);
  }, [selectedTemplate, savedConfigs]);

  const loadTemplateConfigurations = () => {
    try {
      const saved = localStorage.getItem('cataloro_pdf_templates');
      if (saved) {
        setSavedConfigs(JSON.parse(saved));
      }
    } catch (error) {
      console.error('Failed to load template configurations:', error);
      showToast('Failed to load template configurations', 'error');
    }
  };

  const saveTemplateConfiguration = () => {
    try {
      const updatedConfigs = {
        ...savedConfigs,
        [selectedTemplate.key]: templateConfig
      };
      
      localStorage.setItem('cataloro_pdf_templates', JSON.stringify(updatedConfigs));
      setSavedConfigs(updatedConfigs);
      setHasChanges(false);
      
      showToast(`${selectedTemplate.label} template saved successfully!`, 'success');
      
      // Trigger event for other components
      window.dispatchEvent(new CustomEvent('pdfTemplatesUpdated', {
        detail: updatedConfigs
      }));
    } catch (error) {
      console.error('Failed to save template configuration:', error);
      showToast('Failed to save template configuration', 'error');
    }
  };

  const resetTemplateToDefault = () => {
    if (window.confirm('Are you sure you want to reset this template to default settings? This will undo all customizations.')) {
      setTemplateConfig(defaultTemplateConfig);
      setHasChanges(true);
      showToast('Template reset to default configuration', 'info');
    }
  };

  const handleConfigChange = (section, field, value) => {
    setTemplateConfig(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
    setHasChanges(true);
  };

  const handleLogoUpload = async (file) => {
    if (!file) return;
    
    try {
      setLogoFile(file);
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        const logoUrl = e.target.result;
        setLogoPreview(logoUrl);
        handleConfigChange('header', 'logo', logoUrl);
      };
      reader.readAsDataURL(file);
      
    } catch (error) {
      console.error('Failed to upload logo:', error);
      showToast('Failed to upload logo', 'error');
    }
  };

  const generatePreview = async () => {
    setPreviewLoading(true);
    try {
      // Simulate PDF generation with current template
      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/admin/export/template-preview`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          template_type: selectedTemplate.key,
          configuration: templateConfig,
          sample_data: getSampleData(selectedTemplate.key)
        })
      });

      if (response.ok) {
        const result = await response.json();
        if (result.pdf_data) {
          // Create preview download
          const byteCharacters = atob(result.pdf_data);
          const byteNumbers = new Array(byteCharacters.length);
          for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
          }
          const byteArray = new Uint8Array(byteNumbers);
          const blob = new Blob([byteArray], { type: 'application/pdf' });
          
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `${selectedTemplate.key}_preview.pdf`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
          
          showToast('Preview generated successfully!', 'success');
        }
      } else {
        throw new Error('Preview generation failed');
      }
    } catch (error) {
      console.error('Failed to generate preview:', error);
      showToast('Preview generation failed - using current configuration', 'warning');
    } finally {
      setPreviewLoading(false);
    }
  };

  const getSampleData = (templateType) => {
    switch (templateType) {
      case 'basket_export':
        return {
          user: { name: 'Demo User', email: 'demo@cataloro.com' },
          baskets: [
            {
              name: 'Sample Basket',
              items: [
                { title: 'Sample Item 1', price: 99.99, category: 'Electronics' },
                { title: 'Sample Item 2', price: 149.99, category: 'Home & Garden' }
              ]
            }
          ]
        };
      case 'user_data_export':
        return {
          user: { name: 'Demo User', email: 'demo@cataloro.com', joinDate: '2024-01-01' },
          statistics: { totalListings: 12, completedDeals: 8, totalRevenue: 1250.00 }
        };
      default:
        return { sample: true, type: templateType };
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      {/* Header */}
      <div className="bg-gradient-to-r from-amber-600 to-orange-600 rounded-xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold mb-2 flex items-center">
              <FileText className="w-8 h-8 mr-3" />
              Export Manager
            </h1>
            <p className="text-amber-100">Design and customize PDF export templates</p>
          </div>
          
          <div className="flex items-center space-x-3">
            <div className="bg-white/20 rounded-lg p-3 text-center">
              <div className="text-2xl font-bold">{templateTypes.length}</div>
              <div className="text-sm text-amber-100">Templates</div>
            </div>
            <div className="bg-white/20 rounded-lg p-3 text-center">
              <div className="text-2xl font-bold">{Object.keys(savedConfigs).length}</div>
              <div className="text-sm text-amber-100">Configured</div>
            </div>
          </div>
        </div>
      </div>

      {/* Template Selection */}
      <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6">
        <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Select Template Type</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {templateTypes.map((template) => {
            const isSelected = selectedTemplate.key === template.key;
            const isConfigured = savedConfigs[template.key];
            
            return (
              <div
                key={template.key}
                onClick={() => setSelectedTemplate(template)}
                className={`p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 ${
                  isSelected 
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' 
                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                }`}
              >
                <div className="flex items-start justify-between mb-3">
                  <template.icon className={`w-8 h-8 text-${template.color}-600`} />
                  {isConfigured && (
                    <div className="w-3 h-3 bg-green-500 rounded-full" title="Configured"></div>
                  )}
                </div>
                
                <h3 className="font-semibold text-gray-900 dark:text-white mb-2">{template.label}</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">{template.description}</p>
              </div>
            );
          })}
        </div>
      </div>

      {/* Template Configuration */}
      <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <selectedTemplate.icon className={`w-6 h-6 text-${selectedTemplate.color}-600`} />
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">{selectedTemplate.label}</h2>
                <p className="text-sm text-gray-600 dark:text-gray-400">{selectedTemplate.description}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              {hasChanges && (
                <span className="text-sm text-amber-600 dark:text-amber-400 flex items-center">
                  <Settings className="w-4 h-4 mr-1" />
                  Unsaved changes
                </span>
              )}
              
              <button
                onClick={resetTemplateToDefault}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors flex items-center space-x-2"
              >
                <RefreshCw className="w-4 h-4" />
                <span>Reset</span>
              </button>
              
              <button
                onClick={generatePreview}
                disabled={previewLoading}
                className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center space-x-2"
              >
                {previewLoading ? (
                  <div className="w-4 h-4 border-2 border-white border-t-transparent animate-spin rounded-full"></div>
                ) : (
                  <Eye className="w-4 h-4" />
                )}
                <span>Preview</span>
              </button>
              
              <button
                onClick={saveTemplateConfiguration}
                disabled={!hasChanges}
                className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 ${
                  hasChanges
                    ? 'bg-blue-600 text-white hover:bg-blue-700 shadow-lg hover:shadow-xl'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                } flex items-center space-x-2`}
              >
                <Save className="w-4 h-4" />
                <span>Save Template</span>
              </button>
            </div>
          </div>
        </div>

        {/* Configuration Sections */}
        <div className="p-6 space-y-8">
          {/* Header Configuration */}
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Layout className="w-5 h-5 text-blue-600" />
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Header Configuration</h3>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 pl-7">
              <div className="space-y-4">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={templateConfig.header.enabled}
                    onChange={(e) => handleConfigChange('header', 'enabled', e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Enable Header</span>
                </label>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Title
                  </label>
                  <input
                    type="text"
                    value={templateConfig.header.title}
                    onChange={(e) => handleConfigChange('header', 'title', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Subtitle
                  </label>
                  <input
                    type="text"
                    value={templateConfig.header.subtitle}
                    onChange={(e) => handleConfigChange('header', 'subtitle', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                  />
                </div>
              </div>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Logo Upload
                  </label>
                  <div className="flex items-center space-x-4">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleLogoUpload(e.target.files[0])}
                      className="block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                    />
                  </div>
                  {logoPreview && (
                    <div className="mt-2">
                      <img src={logoPreview} alt="Logo preview" className="h-12 w-auto border rounded" />
                    </div>
                  )}
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Background Color
                    </label>
                    <input
                      type="color"
                      value={templateConfig.header.backgroundColor}
                      onChange={(e) => handleConfigChange('header', 'backgroundColor', e.target.value)}
                      className="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Text Color
                    </label>
                    <input
                      type="color"
                      value={templateConfig.header.textColor}
                      onChange={(e) => handleConfigChange('header', 'textColor', e.target.value)}
                      className="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Content Configuration */}
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Type className="w-5 h-5 text-green-600" />
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Content Configuration</h3>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 pl-7">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Font Size
                </label>
                <input
                  type="number"
                  min="8"
                  max="20"
                  value={templateConfig.content.fontSize}
                  onChange={(e) => handleConfigChange('content', 'fontSize', parseInt(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Font Family
                </label>
                <select
                  value={templateConfig.content.fontFamily}
                  onChange={(e) => handleConfigChange('content', 'fontFamily', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white"
                >
                  <option value="Helvetica">Helvetica</option>
                  <option value="Times-Roman">Times Roman</option>
                  <option value="Courier">Courier</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Line Spacing
                </label>
                <input
                  type="number"
                  min="1"
                  max="3"
                  step="0.1"
                  value={templateConfig.content.lineSpacing}
                  onChange={(e) => handleConfigChange('content', 'lineSpacing', parseFloat(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4 pl-7">
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={templateConfig.content.showPageNumbers}
                  onChange={(e) => handleConfigChange('content', 'showPageNumbers', e.target.checked)}
                  className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                />
                <span className="text-sm text-gray-700 dark:text-gray-300">Show Page Numbers</span>
              </label>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Watermark Text
                </label>
                <input
                  type="text"
                  value={templateConfig.content.watermark}
                  onChange={(e) => handleConfigChange('content', 'watermark', e.target.value)}
                  placeholder="Optional watermark text"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>
          </div>

          {/* Footer Configuration */}
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Folder className="w-5 h-5 text-purple-600" />
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Footer Configuration</h3>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 pl-7">
              <div className="space-y-4">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={templateConfig.footer.enabled}
                    onChange={(e) => handleConfigChange('footer', 'enabled', e.target.checked)}
                    className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Enable Footer</span>
                </label>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Footer Text
                  </label>
                  <input
                    type="text"
                    value={templateConfig.footer.text}
                    onChange={(e) => handleConfigChange('footer', 'text', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  />
                </div>
              </div>
              
              <div className="space-y-4">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={templateConfig.footer.showTimestamp}
                    onChange={(e) => handleConfigChange('footer', 'showTimestamp', e.target.checked)}
                    className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Show Timestamp</span>
                </label>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Background Color
                    </label>
                    <input
                      type="color"
                      value={templateConfig.footer.backgroundColor}
                      onChange={(e) => handleConfigChange('footer', 'backgroundColor', e.target.value)}
                      className="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Text Color
                    </label>
                    <input
                      type="color"
                      value={templateConfig.footer.textColor}
                      onChange={(e) => handleConfigChange('footer', 'textColor', e.target.value)}
                      className="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Styling Configuration */}
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Palette className="w-5 h-5 text-indigo-600" />
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Styling Configuration</h3>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 pl-7">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Primary Color
                </label>
                <input
                  type="color"
                  value={templateConfig.styling.primaryColor}
                  onChange={(e) => handleConfigChange('styling', 'primaryColor', e.target.value)}
                  className="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Secondary Color
                </label>
                <input
                  type="color"
                  value={templateConfig.styling.secondaryColor}
                  onChange={(e) => handleConfigChange('styling', 'secondaryColor', e.target.value)}
                  className="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Accent Color
                </label>
                <input
                  type="color"
                  value={templateConfig.styling.accentColor}
                  onChange={(e) => handleConfigChange('styling', 'accentColor', e.target.value)}
                  className="w-full h-10 border border-gray-300 dark:border-gray-600 rounded-lg"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-3 gap-4 pl-7">
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={templateConfig.styling.showBorders}
                  onChange={(e) => handleConfigChange('styling', 'showBorders', e.target.checked)}
                  className="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                />
                <span className="text-sm text-gray-700 dark:text-gray-300">Show Borders</span>
              </label>
              
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={templateConfig.styling.alternatingRows}
                  onChange={(e) => handleConfigChange('styling', 'alternatingRows', e.target.checked)}
                  className="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                />
                <span className="text-sm text-gray-700 dark:text-gray-300">Alternating Rows</span>
              </label>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Border Radius
                </label>
                <input
                  type="number"
                  min="0"
                  max="20"
                  value={templateConfig.styling.borderRadius}
                  onChange={(e) => handleConfigChange('styling', 'borderRadius', parseInt(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ExportManagerDashboard;